# -*- coding: utf-8 -*-
"""tvshows.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/thomasrlessa/7cec18fdc849245674d856d18da6014b/tvshows.ipynb
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pd.read_csv("/content/TV_show_data.csv")

df = pd.read_csv("/content/TV_show_data.csv")

df.describe()

df.info()

contagem_lingua = df['Language'].value_counts()
contagem_lingua

"""#**Qual série tem o maior número de temporadas?**


"""

indice_serie_mais_temporadas = df['Total Seasons'].idxmax()

serie_mais_temporadas = df.loc[indice_serie_mais_temporadas, 'Name']

numero_temporadas = df.loc[indice_serie_mais_temporadas, 'Total Seasons']

print(f"A série com o maior número de temporadas é: {serie_mais_temporadas} com {numero_temporadas} temporadas")

"""#**Qual é a série mais bem avaliada?**


"""

# Encontrando o índice da série com a maior nota
indice_serie_melhor_avaliada = df['Rating'].idxmax()

# Encontrando o nome da série com a maior nota
serie_melhor_avaliada = df.loc[indice_serie_melhor_avaliada, 'Name']

# Encontrando a nota dessa série
nota_melhor_avaliada = df.loc[indice_serie_melhor_avaliada, 'Rating']

print(f"A série mais bem avaliada é: {serie_melhor_avaliada} com uma nota de {nota_melhor_avaliada}")

# Ordenando o DataFrame pelas notas em ordem decrescente e selecionando as 5 primeiras séries
df_top5 = df.sort_values(by='Rating', ascending=False).head(5)

# Criando o gráfico de barras com Seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x='Rating', y='Name', data=df_top5, palette='viridis')

# Adicionando títulos e rótulos
plt.title('Top 5 Séries Mais Bem Avaliadas')
plt.xlabel('Rating')
plt.ylabel('Name')
plt.grid(axis='x', linestyle='--', alpha=0.7)

# Mostrando o gráfico
plt.show()

"""#**Qual é a série mais mal avaliada?**"""

# Encontrando o índice da série com a maior nota
indice_serie_melhor_avaliada = df['Rating'].idxmin()

# Encontrando o nome da série com a maior nota
serie_melhor_avaliada = df.loc[indice_serie_melhor_avaliada, 'Name']

# Encontrando a nota dessa série
nota_melhor_avaliada = df.loc[indice_serie_melhor_avaliada, 'Rating']

print(f"A série mais mal avaliada é: {serie_melhor_avaliada} com uma nota de {nota_melhor_avaliada}")

# Ordenando o DataFrame pelas notas em ordem decrescente e selecionando as 5 primeiras séries
df_bottom5 = df.sort_values(by='Rating', ascending=True).head(5)

plt.figure(figsize=(10, 6))
ax = sns.barplot(x='Rating', y='Name', data=df_bottom5, palette='viridis')

# Adicionando os valores das notas no topo de cada barra
for i in ax.containers:
    ax.bar_label(i, fmt='%.1f', label_type='edge')

# Adicionando títulos e rótulos
plt.title('Top 5 Séries Mais Mal Avaliadas')
plt.xlabel('Nota')
plt.ylabel('Série')
plt.grid(axis='x', linestyle='--', alpha=0.7)

# Mostrando o gráfico
plt.show()

"""#**Qual a relação entre os dias da semana e as séries mais bem avaliadas?**


"""

# Agrupando por dia da semana e calculando a média das notas
df_grouped = df.groupby('Schedule (days)')['Rating'].mean().reset_index()

# Ordenando por dia da semana para garantir a ordem correta
dias_semana = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
df_grouped['Schedule (days)'] = pd.Categorical(df_grouped['Schedule (days)'], categories=dias_semana, ordered=True)
df_grouped = df_grouped.sort_values('Schedule (days)')

# Criando o gráfico de barras com Seaborn
plt.figure(figsize=(10, 6))
ax = sns.barplot(x='Schedule (days)', y='Rating', data=df_grouped, palette='viridis')

# Adicionando os valores das notas no topo de cada barra
for p in ax.patches:
    ax.annotate(f"{p.get_height():.1f}", (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', fontsize=11, color='black', xytext=(0, 5),
                textcoords='offset points')

# Adicionando títulos e rótulos
plt.title('Média das Notas das Séries por Dia da Semana de Exibição')
plt.xlabel('Dia da Semana')
plt.ylabel('Nota Média')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Mostrando o gráfico
plt.show()

"""#**Qual é a duração média dos episódios por gênero?**


"""

# Agrupando por gênero e calculando a média da duração dos episódios
media_por_genero = df.groupby('Genres')['Average Runtime'].mean().reset_index()

print(media_por_genero)